####IMPORTANT INFORMATION

1. THE BOX MODEL

    Padding: transparent area around content, inside of the box 
    Margin: space btn boxes 
    Border: goes around padding and content 
    Fill area: area that gets filled with bckgrnd color/image


    Box-sizing: border-box --> The height and width will be defined for the entire box and not only for the content area.


2. BOX TYPES: Inline , Block-level and Inline-Block

    Block-level boxes (display: block): Elements formatted visually as blocks, 100% of parent's width, vertical one after another

    Inline-block (display: inline-block): A mix of block and inline, occupies only content's space, no line-breaks, box-model applies as showed.

    Inline-boxes (display: inline): Content is distributed in lines, occupies only content's space, no line-breaks, no heights and widths, paddings and margins only horizontal (left and right)


3. POSITIONING SCHEMES: Normal flow, Absoulute positioning, Floats

    Normal flow (position: relative): Default positioning scheme, NOT floated, NOT absolutely positioned, Elements laid out according to source code

    Floats (float: left/right): Element is removed from the normal flow, text and inline elements will wrap around floated element, the container will not adjust its height to the element (solution is to use clearfix ie overflow: auto)

    Absoulute positioning (position: absolute/fixed): Element is removed from the normal flow, no impact on surrounding content or elements, We use top, bottom, left and right to offset the element from its relatively positioned container.

4. STACKING CONTEXTS

    Determine which order elements are laid out on browser eg z-index, opacity, transform, filter


Use caniuse.com to show properties that aren't being compatible only with modern browsers
@support feature queries helps us implement graceful degradation on selected properties on websites ie providing a top notch version to modern browsers and providing an adopted version to browsers that don't support these new features/
bakdrop filter - applies a filter to what's behind an element. Doesn't work on Google Chrome

FLEX BOXES 
Cross axis -> vertical
Main axis -> horizontal

1. PROPERTIES FOR A CONTAINER 
    - flex-drection: row, row-reverse, column, column-reverse
    - flex-wrap: Determines if items shoulf wrap in new line
    - justify-content: How items should align across the main axis  (MOST IMPORTANT)
        a) Space-evenly --> all the spaces in the items are the same ie  
                    ----1----2----3----4----5----
        a) Space-bewteen --> all the spaces btn the items are the same ie  
                    1----2----3----4----5
        b) Space-around --> all the spaces around in the left and the right of the items are the same ie 
                    --1----2----3----4--
        c) Flex-start -> When the items start at the start
        d) Flex-end -> When the items are at the end
        e) Center
    - align-itmes: Similar to justify-content but defines how items should align across the cross axis (MOST IMPORTANT)
        -> It aligns the items based on the highest height of the items so if flex-start is set all will start at height 0 with the largest
            item going till the end of the height of that item

        ->The default is align-items: stretch
            -It stretches all items to match the height of the heighest height item

        -> Align-items: baseline --> It aligns the itesm to their common text eg if one had a higher font-size they would align with the bottom of that item's text
    - align-content: Only applies when there is more than one row of flex items along the cross axis

2. PROPERTIES FOR AN ITEM
    -align-self: Overwrites the justify-content in the main container for a particular item: eg align-self: flex-end
    - align-item: Similar to align-items but only for one item
    - order: Defines the order for how the flex item should appear in the container
    - flex-grow: Define how much an item can grow
        ->An item grows and fills all the spaces available based on the property given by the main container's justify content
        -> Flex-grow:1 or flex:1 on an individual item it makes it occupy all the available white space the item can including the space set by justify content on the others

    - flex-shrinK: Defines how much an item should shrinK
        -> When an item has a flex-shrink property set to 0 it means that it shouldn't decrease in width with the viewport width or height
    - flex-basis: Define its base width

        Can be combined to one attribute: flex: 0 1 auto;



NPM 
IN PACKAGE JSON
1. concat.css -> npm install concat --save-dev :-> This package concats all css files and puts them into one file
2. prefix.css -> npm install autoprefixer --save-dev, for it to work you need to install postcss so npm install postcss-cli --save-dev all as dev dependencies
3. compress.css -> node will compress them no need to use a library
4. To start our devserver and liveserver just run npm run start after adding them in the package file
